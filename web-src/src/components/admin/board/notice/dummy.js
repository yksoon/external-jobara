const dummy =
    '<a href="data:application/json;base64,{
  "version": 6,
  "entities": [
    {
      "entity": {
        "type": "Project",
        "id": "f640c609-4b30-4313-b0f1-91d2835f4a37",
        "name": "K-Medi"
      },
      "children": [
        {
          "entity": {
            "type": "Service",
            "description": "",
            "id": "97e09ca9-4ee6-46d6-ad5f-b0767d1a16b0",
            "name": "Account"
          },
          "children": [
            {
              "entity": {
                "type": "Request",
                "method": {
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.5",
                  "name": "DELETE"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{\n  \"department_idx\" : 2\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60003",
                  "path": "/v1/dpmt/2"
                },
                "id": "98ff3900-2d14-419e-841d-ec45f67af30f",
                "name": "[delete][전공과 삭제]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "x_medicity_token",
                    "value": "KMEDI 1e076771ffb6626e7ec3361535974eaddad9b9d64203a79c00c29789b79303971"
                  }
                ],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.1",
                  "name": "GET"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{ \n  \"user_id\":\"hery@medi-city.co.kr\",\n  \"user_pwd\":\"1234qwer!@\",\n  \"user_name_first_ko\":\"aa\",\n  \"user_name_last_ko\":\"bbb\",\n  \"user_name_first_en\":\"ccc\",\n  \"user_name_last_en\":\"dddd\",\n  \"email\":\"\",\n  \"security_code\":\"123456\",\n  \"mobile1\":\"000\",\n  \"mobile2\":\"1111\",\n  \"mobile3\":\"2222\",\n  \"organization_name\":\"aaaa\",\n  \"department_name\":\"bbbb\"\n  \n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "ip-api.com",
                  "path": "/json/223.130.195.200"
                },
                "id": "5b617ebd-78be-40a1-bd63-274d866389bd",
                "name": "[get][ip조회]",
                "headers": [],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.1",
                  "name": "GET"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{ \n  \"user_id\":\"aaa\",\n  \"user_name\":\"\",\n  \"email\":\"\",\n  \"page_num\":1,\n  \"page_size\":5\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:7070",
                  "path": "/account/v1/mng/user/24"
                },
                "id": "f9c2515d-f7be-4dc9-a3fc-9070dd55416a",
                "name": "[get][사용자][조회]",
                "headers": [],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.1",
                  "name": "GET"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{ \n  \"user_id\":\"hery@medi-city.co.kr\",\n  \"user_pwd\":\"1234qwer!@\",\n  \"user_name_first_ko\":\"aa\",\n  \"user_name_last_ko\":\"bbb\",\n  \"user_name_first_en\":\"ccc\",\n  \"user_name_last_en\":\"dddd\",\n  \"email\":\"\",\n  \"security_code\":\"123456\",\n  \"mobile1\":\"000\",\n  \"mobile2\":\"1111\",\n  \"mobile3\":\"2222\",\n  \"organization_name\":\"aaaa\",\n  \"department_name\":\"bbbb\"\n  \n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60000",
                  "path": "/account/v1/captcha/audio"
                },
                "id": "7cd9da0e-6a1a-4394-96e8-38fefd82dc26",
                "name": "[get][캡챠][오디오]",
                "headers": [],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.1",
                  "name": "GET"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{ \n  \"user_id\":\"hery@medi-city.co.kr\",\n  \"user_pwd\":\"1234qwer!@\",\n  \"user_name_first_ko\":\"aa\",\n  \"user_name_last_ko\":\"bbb\",\n  \"user_name_first_en\":\"ccc\",\n  \"user_name_last_en\":\"dddd\",\n  \"email\":\"\",\n  \"security_code\":\"123456\",\n  \"mobile1\":\"000\",\n  \"mobile2\":\"1111\",\n  \"mobile3\":\"2222\",\n  \"organization_name\":\"aaaa\",\n  \"department_name\":\"bbbb\"\n  \n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60000",
                  "path": "/account/v1/captcha/img"
                },
                "id": "2a039f7d-1661-4233-b02f-f3c53a1ae181",
                "name": "[get][캡챠][이미지]",
                "headers": [],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.3",
                  "name": "POST"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{ \n  \"user_id\":\"\",\n  \"user_name\":\"\",\n  \"email\":\"\",\n  \"page_num\": 1,\n  \"page_size\":10,\n  \"order\" : \"user_idx\",\n  \"sort\" : \"DESC\"\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60000",
                  "path": "/account/v1/users"
                },
                "id": "68ab1835-ba37-4936-971a-6413fbcdc2bf",
                "name": "[post][사용자 리스트]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_token",
                    "value": "KMEDI c46a0cbecbb97d781e0889e0199dcf22f5986fccc1f14a7526750a90272743311"
                  }
                ],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.1",
                  "name": "GET"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{ \n  \"user_id\":\"\",\n  \"user_name\":\"\",\n  \"email\":\"\",\n  \"page_num\": 1,\n  \"page_size\":10,\n  \"order\" : \"user_idx\",\n  \"sort\" : \"DESC\"\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60000",
                  "path": "/account/v1/user/1"
                },
                "id": "ccaebe10-919e-4c77-9869-64a33c1a4eac",
                "name": "[post][사용자 조회]",
                "headers": [],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.3",
                  "name": "POST"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{ \n  \"user_id\":\"hery2@medi-city.co.kr\",\n  \"user_pwd\":\"1234qwer!@\",\n  \"user_name_first_ko\":\"aa\",\n  \"user_name_last_ko\":\"bbb\",\n  \"user_name_first_en\":\"ccc\",\n  \"user_name_last_en\":\"dddd\",\n  \"email\":\"\",\n  \"security_code\":\"770724\",\n  \"mobile1\":\"000\",\n  \"mobile2\":\"1111\",\n  \"mobile3\":\"2222\",\n  \"organization_name\":\"aaaa\",\n  \"department_name\":\"bbbb\"\n  \n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60000",
                  "path": "/account/v1/user"
                },
                "id": "662e0473-a9bf-4e58-a2bd-7a1ed3d06ca5",
                "name": "[post][사용자 추가]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.3",
                  "name": "POST"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{ \n  \"user_id\":\"\",\n  \"user_name\":\"\",\n  \"email\":\"\",\n  \"page_num\": 1,\n  \"page_size\":10,\n  \"order\" : \"user_idx\",\n  \"sort\" : \"DESC\"\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60000",
                  "path": "/account/v1/user/info"
                },
                "id": "edfb6fe5-4cac-4118-a47f-0d544e7127b0",
                "name": "[post][사용자][정보 조회]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_token",
                    "value": "KMEDI c46a0cbecbb97d781e0889e0199dcf22f5986fccc1f14a7526750a90272743311"
                  }
                ],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.3",
                  "name": "POST"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{\n  \"department_name_ko\": \"테스트\",\n  \"department_name_en\": \"test\",\n  \"reg_user_idx\" : 1\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60003",
                  "path": "/v1/dpmt"
                },
                "id": "f85a345e-0b8b-4614-a224-f9634749b263",
                "name": "[post][전공과 추가]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_token",
                    "value": "KMEDI 1e076771ffb6626e7ec3361535974eaddad9b9d64203a79c00c29789b79303971"
                  }
                ],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.3",
                  "name": "POST"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{ \n  \"page_num\": 1,\n  \"page_size\":1000\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60003",
                  "path": "/v1/dpmts"
                },
                "id": "1c7fa266-3af5-477c-aa0e-5a6a2ff56940",
                "name": "[post][전공과][리스트]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_token",
                    "value": "KMEDI 6fb52a7b28dd42df36ca943665b933de6d4f582074d116b9b19f46bd7b48ded301"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_src",
                    "value": "220.121.238.172"
                  }
                ],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.3",
                  "name": "POST"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{ \n  \"answer\":\"752499\"  \n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60000",
                  "path": "/account/v1/captcha"
                },
                "id": "d171ffee-d5a8-432d-ae23-0c1c1bb29ba7",
                "name": "[post][캡챠][검증]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.4",
                  "name": "PUT"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBodyEditorHeight": 292,
                  "textBody": "{ \n  \"user_id\":\"hery@medi-city.co.kr\",\n  \"user_pwd\":\"1234qwer!@\",\n  \"user_name_first_ko\":\"aa\",\n  \"user_name_last_ko\":\"bbb2\",\n  \"user_name_first_en\":\"ccc3\",\n  \"user_name_last_en\":\"dddd4\",\n  \"email\":\"\",\n  \"mobile1\":\"000\",\n  \"mobile2\":\"1111\",\n  \"mobile3\":\"2222\",\n  \"organization_name_en\":\"aaaa\",\n  \"organization_name_ko\":\"테스트\",\n  \"organization_type\":\"000\",\n  \"department_name_en\":\"bbbb\",\n  \"department_name_ko\":\"테스트\"\n  \n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60000",
                  "path": "/account/v1/user"
                },
                "id": "6a19a9ba-81b2-48ab-8637-40e0de8c2282",
                "name": "[put][사용자][수정]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_token",
                    "value": "KMEDI fe1cc11eae88f25b805f453ebfcb5b6252c62b7d75587d8e6650fd02d7dcb5a001"
                  }
                ],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.4",
                  "name": "PUT"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{\n  \"department_name_ko\": \"테스트222\",\n  \"department_name_en\": \"test\",\n  \"department_idx\" : 2,\n  \"mod_user_idx\":1\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60003",
                  "path": "/v1/dpmt"
                },
                "id": "3f85d209-a1dd-4b1c-893b-30270a5e1a30",
                "name": "[put][전공과 수정]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_token",
                    "value": "KMEDI 3cdc6766d013b4434d20df2b038b258a53a144b7e1c5202cfa870110790747a21"
                  }
                ],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            }
          ]
        },
        {
          "entity": {
            "type": "Service",
            "id": "6f74203f-a50f-4e8b-9c0b-cfcc6ecafbee",
            "name": "Auth"
          },
          "children": [
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.3",
                  "name": "POST"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": ""
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60001",
                  "path": "/v1/signout"
                },
                "id": "051c1b56-08d0-469e-a121-4609eacb65f9",
                "name": "[post][사용자][로그아웃]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_token",
                    "value": "KMEDI 32c91fe5a2990cf634c9b79d8985557b315e4815c1a4e38e6ace5272cfbc0bcd11"
                  }
                ],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.3",
                  "name": "POST"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{\n  \"signup_type\":\"000\",\n  \"user_id\":\"hery@medi-city.co.kr\",\n  \"user_pwd\":\"1234qwer!@\"\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60000",
                  "path": "/auth/v1/signin"
                },
                "id": "11fc766a-b551-47e2-a3ce-2349ed015223",
                "name": "[post][사용자][로그인]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_src",
                    "value": "220.121.238.172"
                  }
                ],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.3",
                  "name": "POST"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{ \n  \"user_id\":\"hery\",\n  \"mobile\" : \"01067649906\"\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:7070",
                  "path": "/auth/v1/admin/find/pwd"
                },
                "id": "7f6eed02-d054-4ac9-9efc-6d02840f418c",
                "name": "[post][사용자][비밀번호 찾기]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.4",
                  "name": "PUT"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{ \n  \"user_name\":\"헤리지롱\",\n  \"mobile\":\"01067649906\",\n  \"certify_num\": \"940847\"\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:7070",
                  "path": "/auth/v1/admin/find/id"
                },
                "id": "bfe47651-898d-4ac7-b3c7-d6567c65eb1b",
                "name": "[post][사용자][아이디 찾기]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.3",
                  "name": "POST"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{ \n  \"user_id\":\"hery2\"\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:7070",
                  "path": "/auth/v1/admin/id"
                },
                "id": "14c81a31-9b1f-4eb2-8117-3f5571056f7c",
                "name": "[post][사용자][중복 아이디 확인]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.3",
                  "name": "POST"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": []
                  },
                  "bodyType": "Text",
                  "textBody": ""
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60000",
                  "path": "/auth/v1/refresh"
                },
                "id": "3fc54e36-3875-4643-b39d-2b3007743d93",
                "name": "[post][토큰][리프레시]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_token",
                    "value": "KMEDI 6fb52a7b28dd42df36ca943665b933de6d4f582074d116b9b19f46bd7b48ded301"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_src",
                    "value": "220.121.238.172"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.4",
                  "name": "PUT"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{ \n  \"user_id\":\"dash_admin\",\n  \"user_pwd\":\"dash_admin\"\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:8080",
                  "path": "/auth/v1/admin/find/pwd"
                },
                "id": "76cb681d-70ae-40f9-a88c-41a0974036b2",
                "name": "[put][사용자][비밀번호 변경]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            }
          ]
        },
        {
          "entity": {
            "type": "Service",
            "id": "d0bca05b-4c2c-405b-83f0-3246f9bdbc28",
            "name": "Hotel"
          },
          "children": [
            {
              "entity": {
                "type": "Request",
                "method": {
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.5",
                  "name": "DELETE"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": []
                  },
                  "bodyType": "Text",
                  "textBody": ""
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60000",
                  "path": "/hotel/v1/meta/hotel/1"
                },
                "id": "7f74017a-16be-462b-a835-8adeb1e6057e",
                "name": "[delete][호텔메타][삭제]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "x_medicity_token",
                    "value": "KMEDI 6fb52a7b28dd42df36ca943665b933de6d4f582074d116b9b19f46bd7b48ded301"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_src",
                    "value": "220.121.238.172"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.1",
                  "name": "GET"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": []
                  },
                  "bodyType": "Text",
                  "textBody": ""
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60000",
                  "path": "/hotel/v1/meta/hotel/1"
                },
                "id": "541a8ea6-0be1-4ec3-851d-76a38c4a6f48",
                "name": "[get][호텔메타][상세]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "x_medicity_token",
                    "value": "KMEDI 6fb52a7b28dd42df36ca943665b933de6d4f582074d116b9b19f46bd7b48ded301"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_src",
                    "value": "220.121.238.172"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.3",
                  "name": "POST"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": []
                  },
                  "bodyType": "Text",
                  "textBody": "{\n  \"page_num\": 1,\n  \"page_size\":10\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60000",
                  "path": "/hotel/v1/meta/hotels"
                },
                "id": "0eece780-8575-435a-8f95-6da70a1d4225",
                "name": "[post][호텔메타][리스트]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_token",
                    "value": "KMEDI 6fb52a7b28dd42df36ca943665b933de6d4f582074d116b9b19f46bd7b48ded301"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_src",
                    "value": "220.121.238.172"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.3",
                  "name": "POST"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": []
                  },
                  "bodyType": "Text",
                  "textBody": "{\n  \"name_ko\": \"세인트존스\",\n  \"name_en\": \"St.John's\",\n  \"hotel_status\": \"\",\n  \"branch_type\": \"\",\n  \"build_type\": \"\",\n  \"position_type\": \"\",\n  \"home_page\": \"\",\n  \"zipcode\": \"\",\n  \"addr1_ko\": \"강원도 강릉시 창해로\",\n  \"addr1_en\": \"Changhae-ro, Gangneung-si, Gangwon-do, Republic of Korea\",\n  \"addr2_ko\": \"307\",\n  \"addr2_en\": \"307\",\n  \"latitude\": \"\",\n  \"longitude\": \"\",\n  \"inter_phone_number\": \"82\",\n  \"phone1\": \"33\",\n  \"phone2\": \"660\",\n  \"phone3\": \"9000\",\n  \"check_in_time\": \"\",\n  \"check_out_time\": \"\",\n  \"origin_price\": \"\",\n  \"sale_price\": \"\",\n  \"sale_rate\": \"\",\n  \"sale_start\": \"\",\n  \"sale_end\": \"\",\n  \"info_ko\": \"\",\n  \"info_en\": \"\",\n  \"rule_ko\": \"\",\n  \"rule_en\": \"\",\n  \"del_yn\": \"\",\n  \"additional_info\": {\n    \"fitness_yn\": \"\",\n    \"fitness_free_yn\": \"\",\n    \"wifi_yn\": \"\",\n    \"wifi_free_yn\": \"\",\n    \"parking_yn\": \"\",\n    \"parking_free_yn\": \"\",\n    \"valet_yn\": \"\",\n    \"valet_free_yn\": \"\",\n    \"air_conditioner_yn\": \"\",\n    \"restaurant_yn\": \"\",\n    \"restaurant_free_yn\": \"\",\n    \"breakfast_yn\": \"\",\n    \"breakfast_free_yn\": \"\",\n    \"breakfast_buffet_yn\": \"\",\n    \"breakfast_buffet_free_yn\": \"\",\n    \"with_children_yn\": \"\",\n    \"front_desk_time\": \"\",\n    \"clothes_wash_yn\": \"\",\n    \"swimming_pool_yn\": \"\",\n    \"wheelchair_yn\": \"\",\n    \"business_room_yn\": \"\",\n    \"event_room_yn\": \"\",\n    \"spa_yn\": \"\",\n    \"sauna_yn\": \"\",\n    \"no_smoking_yn\": \"\",\n    \"vr_rental_yn\": \"\",\n    \"companion_animal_yn\": \"\",\n    \"recycling_yn\": \"\",\n    \"reuse_yn\": \"\",\n    \"energy_efficiency\": \"\",\n    \"TRAFFIC\": \"\",\n    \"etc\": \"\",\n    \"del_yn\": \"\"\n  }\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60000",
                  "path": "/hotel/v1/meta/hotel"
                },
                "id": "04ec0776-9149-45db-8dc2-6bbe62d2ff3b",
                "name": "[post][호텔메타][추가]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_token",
                    "value": "KMEDI 96d6a66fac667ee0b6a3fda825b3931ade0459d210a392beaf5b4cfc3cca8ab201"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_src",
                    "value": "220.121.238.172"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.4",
                  "name": "PUT"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": []
                  },
                  "bodyType": "Text",
                  "textBody": "{\n  \"hotel_idx\":1,\n  \"name_ko\": \"세인트존스\",\n  \"name_en\": \"St.John's\",\n  \"hotel_status\": \"\",\n  \"branch_type\": \"000\",\n  \"build_type\": \"\",\n  \"position_type\": \"\",\n  \"home_page\": \"\",\n  \"zipcode\": \"\",\n  \"addr1_ko\": \"강원도 강릉시 창해로\",\n  \"addr1_en\": \"Changhae-ro, Gangneung-si, Gangwon-do, Republic of Korea\",\n  \"addr2_ko\": \"307\",\n  \"addr2_en\": \"307\",\n  \"latitude\": \"\",\n  \"longitude\": \"\",\n  \"inter_phone_number\": \"82\",\n  \"phone1\": \"33\",\n  \"phone2\": \"660\",\n  \"phone3\": \"9000\",\n  \"check_in_time\": \"\",\n  \"check_out_time\": \"\",\n  \"origin_price\": \"\",\n  \"sale_price\": \"\",\n  \"sale_rate\": \"\",\n  \"sale_start\": \"\",\n  \"sale_end\": \"\",\n  \"info_ko\": \"\",\n  \"info_en\": \"\",\n  \"rule_ko\": \"\",\n  \"rule_en\": \"\",\n  \"del_yn\": \"\",\n  \"additional_info\": {\n    \"fitness_yn\": \"Y\",\n    \"fitness_free_yn\": \"N\",\n    \"wifi_yn\": \"Y\",\n    \"wifi_free_yn\": \"\",\n    \"parking_yn\": \"\",\n    \"parking_free_yn\": \"\",\n    \"valet_yn\": \"\",\n    \"valet_free_yn\": \"\",\n    \"air_conditioner_yn\": \"\",\n    \"restaurant_yn\": \"\",\n    \"restaurant_free_yn\": \"\",\n    \"breakfast_yn\": \"\",\n    \"breakfast_free_yn\": \"\",\n    \"breakfast_buffet_yn\": \"\",\n    \"breakfast_buffet_free_yn\": \"\",\n    \"with_children_yn\": \"\",\n    \"front_desk_time\": \"\",\n    \"clothes_wash_yn\": \"\",\n    \"swimming_pool_yn\": \"\",\n    \"wheelchair_yn\": \"\",\n    \"business_room_yn\": \"\",\n    \"event_room_yn\": \"\",\n    \"spa_yn\": \"\",\n    \"sauna_yn\": \"\",\n    \"no_smoking_yn\": \"\",\n    \"vr_rental_yn\": \"\",\n    \"companion_animal_yn\": \"\",\n    \"recycling_yn\": \"\",\n    \"reuse_yn\": \"\",\n    \"energy_efficiency\": \"\",\n    \"TRAFFIC\": \"\",\n    \"etc\": \"\",\n    \"del_yn\": \"\"\n  }\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60000",
                  "path": "/hotel/v1/meta/hotel"
                },
                "id": "639f2e41-3868-41ac-af8e-20bc2b8e2ab3",
                "name": "[put][호텔메타][수정]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_token",
                    "value": "KMEDI 6fb52a7b28dd42df36ca943665b933de6d4f582074d116b9b19f46bd7b48ded301"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_src",
                    "value": "220.121.238.172"
                  }
                ]
              }
            }
          ]
        },
        {
          "entity": {
            "type": "Service",
            "id": "aa54481d-9585-43e0-baaf-3dfba7dce6ec",
            "name": "Management"
          },
          "children": [
            {
              "entity": {
                "type": "Request",
                "method": {
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.1",
                  "name": "GET"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": []
                  },
                  "bodyType": "Text"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60002",
                  "path": "/v1/code/ㅁ"
                },
                "id": "b8b1d11b-1d83-406b-a6b6-c70dae944610",
                "name": "[get][공통코드][조회]",
                "headers": []
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.3",
                  "name": "POST"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": []
                  },
                  "bodyType": "Text",
                  "textBody": "{\n  \"bank_value\": \"신한은행..\"\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60002",
                  "path": "/v1/code/bank/_check"
                },
                "id": "b7d86df6-8325-4014-b6ec-1bb3a59f099d",
                "name": "[post][은행코드][중복조회]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  }
                ]
              }
            }
          ]
        },
        {
          "entity": {
            "type": "Service",
            "id": "1c6863ee-e849-4287-ab33-b9e2badbe520",
            "name": "Notify"
          },
          "children": [
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.3",
                  "name": "POST"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{\n  \t\"device_tokens\" : [\n      \"et5YjzpIWUGNnw7uf-iGjg:APA91bGPo4VgwXEZnaaRMXBRPbfpcGPbyZSSc0kEyc7jwUw8s9MidOahAOaHURIfYP08pWR6ETmbw39W24fLVtp7KVvCL7jBqZKOhLSYk6aoBZhPpFTv6sfP94XETCKjwdVm9-EvNKqs\"\n    ],\n  \"push_title\" : \"푸시 테스트(알림타이틀)\",\n  \"push_body\" : \"푸시 테스트(알림바디)\",\n  \"push_data\" : {\n    \"board_type\" : \"200\",\n    \"board_idx\" : 2\n  }\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:7070",
                  "path": "/notify/v1/mng/push"
                },
                "id": "182a7d44-73e8-4f80-b89e-c733914390ae",
                "name": "[notify][post][푸시-발송]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.3",
                  "name": "POST"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{\n  \t\"user_idx\" : 1,\n  \t\"driver_idx\" : 1,\n  \t\"os_type\": \"000\",\n\t\"device_uuid\": \"aaaaa\",\n\t\"push_token\": \"bbbb\"\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:7070",
                  "path": "/notify/v1/app/in"
                },
                "id": "03da6606-339b-42cf-8812-e27d6e621f8f",
                "name": "[notify][post][푸시정보-등록(앱)]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.3",
                  "name": "POST"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{\n  \t\"user_idx\" : \"\",\n  \t\"driver_idx\" : -1,\n  \t\"os_type\": \"000\",\n\t\"device_uuid\": \"aaaaa\",\n\t\"push_token\": \"bbbb\"\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:7070",
                  "path": "/notify/v1/app/out"
                },
                "id": "a5352128-206f-4e6f-a782-24ebc507be52",
                "name": "[notify][put][푸시정보-수정(앱)]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            }
          ]
        },
        {
          "entity": {
            "type": "Service",
            "id": "6c5cca99-daae-45b3-b891-dc1d9c499cce",
            "name": "Room"
          },
          "children": [
            {
              "entity": {
                "type": "Request",
                "method": {
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.5",
                  "name": "DELETE"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": []
                  },
                  "bodyType": "Text",
                  "textBody": ""
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60000",
                  "path": "/hotel/v1/meta/room/1"
                },
                "id": "f29a7ec3-8547-4e9c-bf69-591dbcbdf6f0",
                "name": "[delete][객실메타][삭제]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "x_medicity_token",
                    "value": "KMEDI 6fb52a7b28dd42df36ca943665b933de6d4f582074d116b9b19f46bd7b48ded301"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_src",
                    "value": "220.121.238.172"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.1",
                  "name": "GET"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": []
                  },
                  "bodyType": "Text",
                  "textBody": ""
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60000",
                  "path": "/hotel/v1/meta/room/1"
                },
                "id": "426ecb11-05db-446b-ae02-95dc4b5318c7",
                "name": "[get][객실메타][상세]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "x_medicity_token",
                    "value": "KMEDI 6fb52a7b28dd42df36ca943665b933de6d4f582074d116b9b19f46bd7b48ded301"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_src",
                    "value": "220.121.238.172"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.3",
                  "name": "POST"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": []
                  },
                  "bodyType": "Text",
                  "textBody": "{\n  \"page_num\": 1,\n  \"page_size\":10\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60000",
                  "path": "/hotel/v1/meta/rooms"
                },
                "id": "e38bcc1e-3b44-4f0c-9246-3a88006a749e",
                "name": "[post][객실메타][리스트]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_token",
                    "value": "KMEDI 6fb52a7b28dd42df36ca943665b933de6d4f582074d116b9b19f46bd7b48ded301"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_src",
                    "value": "220.121.238.172"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.3",
                  "name": "POST"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": []
                  },
                  "bodyType": "Text",
                  "textBody": "{\n  \"hotel_idx\": 1,\n  \"name_ko\": \"테스트\",\n  \"name_en\": \"test\",\n  \"room_number\": \"\",\n  \"room_size\": \"\",\n  \"bed_yn\": \"\",\n  \"bed_type\": \"\",\n  \"add_bed_yn\": \"\",\n  \"add_bed_type\": \"\",\n  \"origin_price\": \"\",\n  \"sale_price\": \"\",\n  \"sale_rate\": \"\",\n  \"sale_start\": \"\",\n  \"sale_end\": \"\",\n  \"info_ko\": \"\",\n  \"info_en\": \"\",\n  \"rule_ko\": \"\",\n  \"rule_en\": \"\",\n  \"del_yn\": \"\",\n  \"reg_dttm\": \"\",\n  \"mod_dttm\": \"\",\n  \"additional_info\": {\n    \"view_type\": \"\",\n    \"children_bed_yn\": \"\",\n    \"bathroom_yn\": \"\",\n    \"private_bathroom_yn\": \"\",\n    \"towel_yn\": \"\",\n    \"towel_type\": \"\",\n    \"toiletries_yn\": \"\",\n    \"hair_dryer_yn\": \"\",\n    \"refrigerator_yn\": \"\",\n    \"tea_maker_yn\": \"\",\n    \"water_yn\": \"\",\n    \"private_safe_yn\": \"\",\n    \"blackout_curtain_yn\": \"\",\n    \"satellite_tv_yn\": \"\",\n    \"tv_yn\": \"\",\n    \"fire_detector_yn\": \"\",\n    \"slippers_yn\": \"\",\n    \"kitchen_yn\": \"\",\n    \"terrace_yn\": \"\",\n    \"veranda_yn\": \"\",\n    \"wifi_yn\": \"\",\n    \"wifi_free_yn\": \"\",\n    \"air_conditioner_yn\": \"\",\n    \"clothes_wash_yn\": \"\",\n    \"swimming_pool_yn\": \"\",\n    \"spa_yn\": \"\",\n    \"sauna_yn\": \"\",\n    \"no_smoking_yn\": \"\",\n    \"vr_rental_yn\": \"\",\n    \"companion_animal_yn\": \"\",\n    \"recycling_yn\": \"\",\n    \"reuse_yn\": \"\",\n    \"energy_efficiency\": \"\",\n    \"etc\": \"\",\n    \"del_yn\": \"\",\n    \"reg_user_idx\": 0,\n    \"mod_user_idx\": 0,\n    \"reg_dttm\": \"\",\n    \"mod_dttm\": \"\"\n  }\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60000",
                  "path": "/hotel/v1/meta/room"
                },
                "id": "63315491-bccb-4b68-8e79-8a99d7862b03",
                "name": "[post][객실메타][추가]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_token",
                    "value": "KMEDI 6fb52a7b28dd42df36ca943665b933de6d4f582074d116b9b19f46bd7b48ded301"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_src",
                    "value": "220.121.238.172"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.4",
                  "name": "PUT"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": []
                  },
                  "bodyType": "Text",
                  "textBody": "{\n  \"room_idx\": 1,\n  \"name_ko\": \"테스트\",\n  \"name_en\": \"test\",\n  \"room_number\": \"\",\n  \"room_size\": \"\",\n  \"bed_yn\": \"\",\n  \"bed_type\": \"\",\n  \"add_bed_yn\": \"\",\n  \"add_bed_type\": \"\",\n  \"origin_price\": \"\",\n  \"sale_price\": \"\",\n  \"sale_rate\": \"\",\n  \"sale_start\": \"\",\n  \"sale_end\": \"\",\n  \"info_ko\": \"\",\n  \"info_en\": \"\",\n  \"rule_ko\": \"\",\n  \"rule_en\": \"\",\n  \"del_yn\": \"\",\n  \"reg_dttm\": \"\",\n  \"mod_dttm\": \"\",\n  \"additional_info\": {\n    \"view_type\": \"000\",\n    \"children_bed_yn\": \"Y\",\n    \"bathroom_yn\": \"\",\n    \"private_bathroom_yn\": \"\",\n    \"towel_yn\": \"\",\n    \"towel_type\": \"\",\n    \"toiletries_yn\": \"\",\n    \"hair_dryer_yn\": \"\",\n    \"refrigerator_yn\": \"\",\n    \"tea_maker_yn\": \"\",\n    \"water_yn\": \"\",\n    \"private_safe_yn\": \"\",\n    \"blackout_curtain_yn\": \"\",\n    \"satellite_tv_yn\": \"\",\n    \"tv_yn\": \"\",\n    \"fire_detector_yn\": \"\",\n    \"slippers_yn\": \"\",\n    \"kitchen_yn\": \"\",\n    \"terrace_yn\": \"\",\n    \"veranda_yn\": \"\",\n    \"wifi_yn\": \"\",\n    \"wifi_free_yn\": \"\",\n    \"air_conditioner_yn\": \"\",\n    \"clothes_wash_yn\": \"\",\n    \"swimming_pool_yn\": \"\",\n    \"spa_yn\": \"\",\n    \"sauna_yn\": \"\",\n    \"no_smoking_yn\": \"\",\n    \"vr_rental_yn\": \"\",\n    \"companion_animal_yn\": \"\",\n    \"recycling_yn\": \"\",\n    \"reuse_yn\": \"\",\n    \"energy_efficiency\": \"\",\n    \"etc\": \"\",\n    \"del_yn\": \"\",\n    \"reg_user_idx\": 0,\n    \"mod_user_idx\": 0,\n    \"reg_dttm\": \"\",\n    \"mod_dttm\": \"\"\n  }\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60000",
                  "path": "/hotel/v1/meta/room"
                },
                "id": "7cb83001-1112-4013-b5a0-733cb84de8ec",
                "name": "[put][객실메타][수정]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_token",
                    "value": "KMEDI 6fb52a7b28dd42df36ca943665b933de6d4f582074d116b9b19f46bd7b48ded301"
                  },
                  {
                    "enabled": true,
                    "name": "x_medicity_src",
                    "value": "220.121.238.172"
                  }
                ]
              }
            }
          ]
        },
        {
          "entity": {
            "type": "Service",
            "id": "dcfd2057-f8b8-4768-9241-d06da5a01e39",
            "name": "공통"
          },
          "children": [
            {
              "entity": {
                "type": "Request",
                "method": {
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.1",
                  "name": "GET"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": []
                  },
                  "bodyType": "Text"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60003",
                  "path": "/v1/info/result/9999"
                },
                "id": "a968615c-8400-459c-9fe8-103906073696",
                "name": "[결과 코드 조회]",
                "headers": []
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.3",
                  "name": "POST"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{ \n  \"encrypt_text\":\"Qu1ISJoWZ4OlEs0YTmvYCfeuxv0KGxgwxu/Ue6TFL8m3aLwC377ByveH/GmZa8AN9q36bp2n8iuxjKOsq5Vc7w==\"\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60000",
                  "path": "/auth/v1/jasypt/decrypt"
                },
                "id": "a9eb046f-2149-4b4e-9731-8378b047e69b",
                "name": "[복호화]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.3",
                  "name": "POST"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{ \n  \"plan_text\":\"http://ip-api.com/json\"\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60003",
                  "path": "/v1/jasypt/encrypt"
                },
                "id": "9e239a5c-c5fa-4223-bdf5-098b6a93b092",
                "name": "[암호화]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.1",
                  "name": "GET"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": []
                  },
                  "bodyType": "Text"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60003",
                  "path": "/v1/info"
                },
                "id": "36f5af4d-73a9-4fc4-9188-5aa4c49d2d1a",
                "name": "[정보조회]",
                "headers": []
              }
            }
          ]
        },
        {
          "entity": {
            "type": "Scenario",
            "id": "5c0497c4-03c6-42ef-a41f-7fbb68a6cb27",
            "name": "Board"
          },
          "children": [
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.3",
                  "name": "POST"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{ \n  \"alim_yn\": \"N\",\n  \"board_type\": \"000\",\n  \"board_type_cd\": \"000\",\n  \"category_type\": \"000\",\n  \"channel_type\": \"000\",\n  \"detail_type\": \"000\",\n  \"important_type\": \"100\",\n  \"main_content\": \"ㅁㄴㅇㄹ\",\n  \"main_subject\": \"ㅁㄴㅇㄹ\",\n  \"register\": 1,\n  \"show_yn\": \"Y\",\n  \"user_idx\": \"\"\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60000",
                  "path": "/mng/v1/board"
                },
                "id": "b3fcfe81-2eab-4b8f-9470-c33f230b669b",
                "name": "[board][post][게시물 추가]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "name": "auth_token",
                    "value": "KMEDI eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJkYXNoX2FkbWluIiwiaWF0IjoxNjQwMzMxNjE3LCJleHAiOjE2NDAzNjc2MTd9.w6jKmjVeNNq3CwTlNPb3LYL_var8ONwG_J1avxBLzwABNgke4c-sXJ0LEiA85KeF8sHbLA-mH9Cyb3AJzZKaWQ.U"
                  }
                ],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.4",
                  "name": "PUT"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{ \n  \"board_idx\": 1,\n  \"board_type\": \"100\",\n  \"category_type\": \"999\",\n  \"client_idx\": 1,\n  \"detail_type\": \"000\",\n  \"main_content\": \"문의\",\n  \"main_subject\": \"1:1 제목임돠(답변 주삼)\",\n  \"process_status\": \"000\",\n  \"service_idx\": 1,\n  \"sub_content\": \"답변\",\n  \"user_idx\": 1\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:7070",
                  "path": "/board/v1/mng"
                },
                "id": "38554159-4a05-4e64-8c98-4e99d02f374a",
                "name": "[board][post][게시물 수정]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "enabled": true,
                    "name": "auth_token",
                    "value": "\tTMS eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJkYXNoX2FkbWluIiwiaWF0IjoxNjQwMzMxNjE3LCJleHAiOjE2NDAzNjc2MTd9.w6jKmjVeNNq3CwTlNPb3LYL_var8ONwG_J1avxBLzwABNgke4c-sXJ0LEiA85KeF8sHbLA-mH9Cyb3AJzZKaWQ.U"
                  }
                ],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.5",
                  "name": "DELETE"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{ \n  \"board_idx\":1,\n  \"register\":1,\n  \"board_type\":\"000\",\n  \"detail_type\":\"000\",\n  \"category_type\":\"999\",\n  \"subject\":\"제목임돠......\",\n  \"content\":\"내용임돠\"\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:7070",
                  "path": "/board/v1/mng/43"
                },
                "id": "ad7fb600-b68f-4922-8aa4-af1b3ab3cfb4",
                "name": "[board][delete][게시물 삭제]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "authToken",
                    "value": "TMS eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJkYXNoX2FkbWluIiwiaWF0IjoxNjMxODQ1NDQ4LCJleHAiOjE2MzE4NDkwNDh9.J03A8Zaz8oE9qdQUn_Xzw2lupyphaeUNv1w9bAzFxRCylfntLWN4eqxZztPYrPhy1knzp3GclSNpuJDn7fNdsA"
                  }
                ],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "requestBody": true,
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.3",
                  "name": "POST"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{\n  \"board_type\": \"200\",\n  \"order\": \"\",\n  \"page_num\": 1,\n  \"page_size\": 10\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:60000",
                  "path": "/mng/v1/boards"
                },
                "id": "e7162aee-857d-441d-a990-3a7d825a237e",
                "name": "[board][post][게시물 리스트]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "enabled": true,
                    "name": "auth_token",
                    "value": "\tTMS eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJkYXNoX2FkbWluIiwiaWF0IjoxNjQwMzMxNjE3LCJleHAiOjE2NDAzNjc2MTd9.w6jKmjVeNNq3CwTlNPb3LYL_var8ONwG_J1avxBLzwABNgke4c-sXJ0LEiA85KeF8sHbLA-mH9Cyb3AJzZKaWQ.U"
                  }
                ],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            },
            {
              "entity": {
                "type": "Request",
                "method": {
                  "link": "http://tools.ietf.org/html/rfc7231#section-4.3.1",
                  "name": "GET"
                },
                "body": {
                  "formBody": {
                    "overrideContentType": true,
                    "encoding": "application/x-www-form-urlencoded",
                    "items": [
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "id",
                        "value": "luckymanjun"
                      },
                      {
                        "enabled": true,
                        "type": "Text",
                        "name": "password",
                        "value": "1234"
                      }
                    ]
                  },
                  "bodyType": "Text",
                  "textBody": "{ \n  \"page_num\":1,\n  \"page_size\":5\n}"
                },
                "uri": {
                  "query": {
                    "delimiter": "&",
                    "items": []
                  },
                  "scheme": {
                    "name": "http",
                    "version": "V11"
                  },
                  "host": "localhost:7070",
                  "path": "/board/v1/mng/1"
                },
                "id": "575a987b-d2bc-4fe0-abc6-24c28558c845",
                "name": "[board][get][게시물 상세]",
                "headers": [
                  {
                    "enabled": true,
                    "name": "auth_token",
                    "value": "\tTMS eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJkYXNoX2FkbWluIiwiaWF0IjoxNjQwMzMxNjE3LCJleHAiOjE2NDAzNjc2MTd9.w6jKmjVeNNq3CwTlNPb3LYL_var8ONwG_J1avxBLzwABNgke4c-sXJ0LEiA85KeF8sHbLA-mH9Cyb3AJzZKaWQ.U"
                  }
                ],
                "assertions": [
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  },
                  {
                    "comparison": "Equals",
                    "subject": "ResponseStatus",
                    "path": "code",
                    "value": "200"
                  }
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}" download>kdedi.json</a>';

export { dummy };
